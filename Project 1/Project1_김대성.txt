/*
 * ELF executable loading
 * Copyright (c) 2003, Jeffrey K. Hollingsworth <hollings@cs.umd.edu>
 * Copyright (c) 2003, David H. Hovemeyer <daveho@cs.umd.edu>
 *
 * All rights reserved.
 *
 * This code may not be resdistributed without the permission of the copyright holders.
 * Any student solutions using any of this code base constitute derviced work and may
 * not be redistributed in any form.  This includes (but is not limited to) posting on
 * public forums or web sites, providing copies to (past, present, or future) students
 * enrolled in similar operating systems courses the University of Maryland's CMSC412 course.
 *
 * $Revision: 1.31 $
 *
 */

#include <geekos/errno.h>
#include <geekos/kassert.h>
#include <geekos/ktypes.h>
#include <geekos/screen.h>      /* for debug Print() statements */
#include <geekos/pfat.h>
#include <geekos/malloc.h>
#include <geekos/string.h>
#include <geekos/user.h>
#include <geekos/fileio.h>
#include <geekos/elf.h>

#include <geekos/paging.h>

int elfDebug = 0;

/**
 * From the data of an ELF executable, determine how its segments
 * need to be loaded into memory.
 * @param exeFileData buffer containing the executable file
 * @param exeFileLength length of the executable file in bytes
 * @param exeFormat structure describing the executable's segments
 *   and entry address; to be filled in
 * @return 0 if successful, < 0 on error
 */

//201801527 김대성

int Parse_ELF_Executable(char *exeFileData, ulong_t exeFileLength, struct Exe_Format *exeFormat) 
{
	int i = 0;

	elfHeader *elf_p = (elfHeader *)exeFileData;

	programHeader *program_p = (programHeader *)(exeFileData + elf_p->phoff);

	struct Exe_Segment *segment_p = exeFormat->segmentList;

	if (!(((elf_p->ident[0] == 0x7f) && (elf_p->ident[1] == 'E'))&& (elf_p->ident[2] == 'L')) && (elf_p->ident[3] == 'F')) 
	{ 
		Print("Error!\n");
		return -1;
	}

	else if ((elf_p->type == 0) || (elf_p->machine == 0) || (elf_p->version == 0) || (elf_p->entry == 0) || (elf_p->phoff == 0) || (elf_p->sphoff == 0) || (elf_p->phnum ==0) || (elf_p->shnum == 0))
	{
		Print("Error!\n");
		return -1;
	}

	for (i= 0; i < elf_p->phnum; i++) 
	{
		segment_p->offsetInFile = program_p->offset;    
		segment_p->lengthInFile = program_p->fileSize;    
		segment_p->startAddress = program_p->vaddr;   
		segment_p->sizeInMemory = program_p->memSize;  
		segment_p->protFlags = program_p->flags;
		program_p++;
		segment_p++;		
	}

	exeFormat->numSegments = elf_p->phnum;
	exeFormat->entryAddr = elf_p->entry; 

	return 0;
}
